---
version: 3
vars:
  REPOSITORY_NAME: stuttgart-things
  PROJECT_NAME:
    sh: pwd | grep -o "[^/]*$"
  DATE:
    sh: date +"%y.%m%d.%H%M"
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  VERSION:
    sh: |
      [ "$(git branch --show-current)" != "main" ] && echo "previewPost-$(git describe --tags --abbrev=0)" || echo $(git describe --tags --abbrev=0)
  GIT_REPO: github.com/stuttgart-things/kaeffken
  IMAGE_REPO: ghcr.io/stuttgart-things/kaeffken
  ORGA_NAME: stuttgart-things
  MODULE: github.com/{{ .ORGA_NAME }}/{{ .PROJECT_NAME }}
  DATE:
    sh: date -Ih
  GIT_COMMIT:
    sh: git log -n 1 --format=%h

dotenv: ['.env', '{{.HOME}}/.env']

tasks:
  build-ko:
    desc: Build image w/ KO
    deps: [lint, test, commit]
    env:
      KO_DOCKER_REPO: ghcr.io/{{ .ORGA_NAME }}/{{ .PROJECT_NAME }}
    cmds:
      - ko build {{ .MODULE }} --image-label org.opencontainers.image.source=https://github.com/{{ .ORGA_NAME }}/{{ .PROJECT_NAME }} --push

  tests:
    desc: Built cli tests
    deps:
      - build
    cmds:
      - kaeffken encrypt --source tests/secret.yaml --output stdout

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 20s
      - gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  run:
    desc: Run
    deps: [build]
    cmds:
      - "$GOPATH/bin/{{ .PROJECT_NAME }}"

  build:
    desc: Install
    deps: [lint, test]
    cmds:
      - go mod tidy
      - go install -ldflags="-X {{ .MODULE }}/cmd.version={{ .VERSION }} -X {{ .MODULE }}/cmd.date={{ .DATE }} -X {{ .MODULE }}/cmd.commit={{ .GIT_COMMIT }}"

  lint:
    desc: Lint code
    cmds:
      - go mod tidy
      - cmd: golangci-lint run
        ignore_error: true

  test:
    desc: Test code
    cmds:
      - go mod tidy
      - cmd: go test ./... -v

  commit:
    desc: Commit + push code into branch
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "committing changes"
          echo "ENTER COMMIT MESSAGE"
          read COMMIT_MESSAGE;
          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "no changes"
        fi
        git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 20s
      - gh pr checks $(gh pr list | grep "^[^#;]" | grep "{{ .BRANCH }}" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep "{{ .BRANCH }}" | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  delete-branch:
    desc: Delete branch from origin
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be deleted (remote) branch:"
        read BRANCH_NAME;
        git branch -d ${BRANCH_NAME}
        git push origin -d ${BRANCH_NAME}

  build-ko:
    desc: Build KO Image
    deps: [commit]
    cmds:
      - |
        BUILD_IMAGE=$(ko build --preserve-import-paths --image-label org.opencontainers.image.source={{ .GIT_REPO }})
        echo "Built image: ${BUILD_IMAGE}"
    env:
      KO_DOCKER_REPO: "{{ .IMAGE_REPO }}"
      KO_REPO: "{{ .GIT_REPO }}"

  release:
    desc: Release
    cmds:
      - git checkout main && git pull
      - task: commit
      - npx semantic-release --dry-run
      - npx semantic-release --debug --no-ci
      - rm -rf ./dist
      - goreleaser healthcheck
      - goreleaser check
      - goreleaser release --skip=publish --snapshot --clean
      - goreleaser release --clean
      - rm -rf ./dist
      - task: build-ko